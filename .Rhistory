par(mfrow=c(2,1), cex=0.7, mai=c(0,0,0,0))
plot(c(100, 150), c(300, 350), type = "n", xlab = "", ylab = "", bty="n", axes=F)
graphics::rasterImage(imagen_num,  100, 300, 150, 350, interpolate = FALSE)
plot(c(100, 150), c(300, 350), type = "n", xlab = "", ylab = "", bty="n", axes=F)
graphics::rasterImage(t_imagen_num_dbscan,  100, 300, 150, 350, interpolate = FALSE)
modelo_dbscan <- dbscan(colors_df, eps = 5, minPts = 1)
modelo_dbscan
centroides <- colors_df %>%
mutate(cluster = modelo_dbscan$cluster) %>%
group_by(cluster) %>%
summarise(red = mean(red),
green = mean(green),
blue = mean(blue))
centroides[centroides$cluster == 0,] <- 0
# extraigo los clusters de cada punto y creo una tabla para almacenarlos
t_colors_df_dbscan <- tibble(cluster = modelo_dbscan$cluster)
# fusiono la tabla de observaciones con las coordenadas de los centroides obtenidos previamente
t_colors_df_dbscan <- inner_join(t_colors_df_dbscan, centroides, by = "cluster")
# creo una copia de la imagen original y reemplazo valores por centroides obtenidos
t_imagen_num_dbscan <- imagen_num
t_imagen_num_dbscan[,,1] <- t_colors_df_dbscan$red/255
t_imagen_num_dbscan[,,2] <- t_colors_df_dbscan$green/255
t_imagen_num_dbscan[,,3] <- t_colors_df_dbscan$blue/255
# dibujo la imagen original y la transformada
par(mfrow=c(2,1), cex=0.7, mai=c(0,0,0,0))
plot(c(100, 150), c(300, 350), type = "n", xlab = "", ylab = "", bty="n", axes=F)
graphics::rasterImage(imagen_num,  100, 300, 150, 350, interpolate = FALSE)
plot(c(100, 150), c(300, 350), type = "n", xlab = "", ylab = "", bty="n", axes=F)
graphics::rasterImage(t_imagen_num_dbscan,  100, 300, 150, 350, interpolate = FALSE)
modelo_dbscan <- dbscan(colors_df, eps = 5, minPts = 2)
modelo_dbscan
centroides <- colors_df %>%
mutate(cluster = modelo_dbscan$cluster) %>%
group_by(cluster) %>%
summarise(red = mean(red),
green = mean(green),
blue = mean(blue))
centroides[centroides$cluster == 0,] <- 0
# extraigo los clusters de cada punto y creo una tabla para almacenarlos
t_colors_df_dbscan <- tibble(cluster = modelo_dbscan$cluster)
# fusiono la tabla de observaciones con las coordenadas de los centroides obtenidos previamente
t_colors_df_dbscan <- inner_join(t_colors_df_dbscan, centroides, by = "cluster")
# creo una copia de la imagen original y reemplazo valores por centroides obtenidos
t_imagen_num_dbscan <- imagen_num
t_imagen_num_dbscan[,,1] <- t_colors_df_dbscan$red/255
t_imagen_num_dbscan[,,2] <- t_colors_df_dbscan$green/255
t_imagen_num_dbscan[,,3] <- t_colors_df_dbscan$blue/255
# dibujo la imagen original y la transformada
par(mfrow=c(2,1), cex=0.7, mai=c(0,0,0,0))
plot(c(100, 150), c(300, 350), type = "n", xlab = "", ylab = "", bty="n", axes=F)
graphics::rasterImage(imagen_num,  100, 300, 150, 350, interpolate = FALSE)
plot(c(100, 150), c(300, 350), type = "n", xlab = "", ylab = "", bty="n", axes=F)
graphics::rasterImage(t_imagen_num_dbscan,  100, 300, 150, 350, interpolate = FALSE)
modelo_dbscan <- dbscan(colors_df, eps = 5, minPts = 10)
modelo_dbscan
centroides <- colors_df %>%
mutate(cluster = modelo_dbscan$cluster) %>%
group_by(cluster) %>%
summarise(red = mean(red),
green = mean(green),
blue = mean(blue))
centroides[centroides$cluster == 0,] <- 0
# extraigo los clusters de cada punto y creo una tabla para almacenarlos
t_colors_df_dbscan <- tibble(cluster = modelo_dbscan$cluster)
# fusiono la tabla de observaciones con las coordenadas de los centroides obtenidos previamente
t_colors_df_dbscan <- inner_join(t_colors_df_dbscan, centroides, by = "cluster")
# creo una copia de la imagen original y reemplazo valores por centroides obtenidos
t_imagen_num_dbscan <- imagen_num
t_imagen_num_dbscan[,,1] <- t_colors_df_dbscan$red/255
t_imagen_num_dbscan[,,2] <- t_colors_df_dbscan$green/255
t_imagen_num_dbscan[,,3] <- t_colors_df_dbscan$blue/255
# dibujo la imagen original y la transformada
par(mfrow=c(2,1), cex=0.7, mai=c(0,0,0,0))
plot(c(100, 150), c(300, 350), type = "n", xlab = "", ylab = "", bty="n", axes=F)
graphics::rasterImage(imagen_num,  100, 300, 150, 350, interpolate = FALSE)
plot(c(100, 150), c(300, 350), type = "n", xlab = "", ylab = "", bty="n", axes=F)
graphics::rasterImage(t_imagen_num_dbscan,  100, 300, 150, 350, interpolate = FALSE)
? dbscan
modelo_dbscan <- dbscan(colors_df, eps = 5, minPts = 5)
modelo_dbscan
centroides <- colors_df %>%
mutate(cluster = modelo_dbscan$cluster) %>%
group_by(cluster) %>%
summarise(red = mean(red),
green = mean(green),
blue = mean(blue))
centroides[centroides$cluster == 0,] <- 0
# extraigo los clusters de cada punto y creo una tabla para almacenarlos
t_colors_df_dbscan <- tibble(cluster = modelo_dbscan$cluster)
# fusiono la tabla de observaciones con las coordenadas de los centroides obtenidos previamente
t_colors_df_dbscan <- inner_join(t_colors_df_dbscan, centroides, by = "cluster")
# creo una copia de la imagen original y reemplazo valores por centroides obtenidos
t_imagen_num_dbscan <- imagen_num
t_imagen_num_dbscan[,,1] <- t_colors_df_dbscan$red/255
t_imagen_num_dbscan[,,2] <- t_colors_df_dbscan$green/255
t_imagen_num_dbscan[,,3] <- t_colors_df_dbscan$blue/255
# dibujo la imagen original y la transformada
par(mfrow=c(2,1), cex=0.7, mai=c(0,0,0,0))
plot(c(100, 150), c(300, 350), type = "n", xlab = "", ylab = "", bty="n", axes=F)
graphics::rasterImage(imagen_num,  100, 300, 150, 350, interpolate = FALSE)
plot(c(100, 150), c(300, 350), type = "n", xlab = "", ylab = "", bty="n", axes=F)
graphics::rasterImage(t_imagen_num_dbscan,  100, 300, 150, 350, interpolate = FALSE)
modelo_dbscan <- dbscan(colors_df, eps = 1, minPts = 5)
modelo_dbscan
centroides <- colors_df %>%
mutate(cluster = modelo_dbscan$cluster) %>%
group_by(cluster) %>%
summarise(red = mean(red),
green = mean(green),
blue = mean(blue))
centroides[centroides$cluster == 0,] <- 0
# extraigo los clusters de cada punto y creo una tabla para almacenarlos
t_colors_df_dbscan <- tibble(cluster = modelo_dbscan$cluster)
# fusiono la tabla de observaciones con las coordenadas de los centroides obtenidos previamente
t_colors_df_dbscan <- inner_join(t_colors_df_dbscan, centroides, by = "cluster")
# creo una copia de la imagen original y reemplazo valores por centroides obtenidos
t_imagen_num_dbscan <- imagen_num
t_imagen_num_dbscan[,,1] <- t_colors_df_dbscan$red/255
t_imagen_num_dbscan[,,2] <- t_colors_df_dbscan$green/255
t_imagen_num_dbscan[,,3] <- t_colors_df_dbscan$blue/255
# dibujo la imagen original y la transformada
par(mfrow=c(2,1), cex=0.7, mai=c(0,0,0,0))
plot(c(100, 150), c(300, 350), type = "n", xlab = "", ylab = "", bty="n", axes=F)
graphics::rasterImage(imagen_num,  100, 300, 150, 350, interpolate = FALSE)
plot(c(100, 150), c(300, 350), type = "n", xlab = "", ylab = "", bty="n", axes=F)
graphics::rasterImage(t_imagen_num_dbscan,  100, 300, 150, 350, interpolate = FALSE)
colors_pca <- predict(prcomp(colors_df))
colors_pca <- colors_df %>%  prcomp() %>% predict() %>% as_tibble()
View(colors_pca)
colors_pca <- colors_df %>%  prcomp() %>% predict() %>% as_tibble() %>% .[1:2,]
colors_pca <- colors_df %>%  prcomp() %>% predict() %>% as_tibble() %>% .[,1:2]
ggplot(colors_pca, aes(PC1,PC2)) + geom_point()
modelo_dbscan <- dbscan(colors_pca, eps = 1, minPts = 5)
ggplot(colors_pca, aes(PC1,PC2, col = modelo_dbscan$cluster)) + geom_point()
ggplot(colors_pca, aes(PC1,PC2, col = factor(modelo_dbscan$cluster))) + geom_point()
ggplot(colors_pca, aes(PC1,PC2, col = factor(modelo_dbscan$cluster))) +
geom_point() +
theme(legend.position = "none")
factor(modelo_dbscan$cluster)
modelo_dbscan <- dbscan(colors_pca, eps = 1, minPts = 15)
ggplot(colors_pca, aes(PC1,PC2, col = factor(modelo_dbscan$cluster))) +
geom_point() +
theme(legend.position = "none")
modelo_dbscan <- dbscan(colors_pca, eps = 2, minPts = 15)
ggplot(colors_pca, aes(PC1,PC2, col = factor(modelo_dbscan$cluster))) +
geom_point() +
theme(legend.position = "none")
modelo_dbscan <- dbscan(colors_pca, eps = 5, minPts = 20)
ggplot(colors_pca, aes(PC1,PC2, col = factor(modelo_dbscan$cluster))) +
geom_point() +
theme(legend.position = "none")
modelo_dbscan <- dbscan(colors_pca, eps = 3, minPts = 20)
ggplot(colors_pca, aes(PC1,PC2, col = factor(modelo_dbscan$cluster))) +
geom_point() +
theme(legend.position = "none")
modelo_dbscan <- dbscan(colors_pca, eps = 1, minPts = 20)
ggplot(colors_pca, aes(PC1,PC2, col = factor(modelo_dbscan$cluster))) +
geom_point() +
theme(legend.position = "none")
modelo_dbscan <- dbscan(colors_pca, eps = 0.1, minPts = 20)
ggplot(colors_pca, aes(PC1,PC2, col = factor(modelo_dbscan$cluster))) +
geom_point() +
theme(legend.position = "none")
modelo_dbscan <- dbscan(colors_pca, eps = 10, minPts = 20)
ggplot(colors_pca, aes(PC1,PC2, col = factor(modelo_dbscan$cluster))) +
geom_point() +
theme(legend.position = "none")
modelo_dbscan <- dbscan(colors_pca, eps = 3, minPts = 15)
ggplot(colors_pca, aes(PC1,PC2, col = factor(modelo_dbscan$cluster))) +
geom_point() +
theme(legend.position = "none")
modelo_dbscan <- dbscan(colors_pca, eps = 3, minPts = 5)
ggplot(colors_pca, aes(PC1,PC2, col = factor(modelo_dbscan$cluster))) +
geom_point() +
theme(legend.position = "none")
modelo_dbscan <- dbscan(colors_pca, eps = 1, minPts = 5)
ggplot(colors_pca, aes(PC1,PC2, col = factor(modelo_dbscan$cluster))) +
geom_point() +
theme(legend.position = "none")
ggplot(colors_pca, aes(PC1,PC2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
factor(modelo_dbscan$cluster)
ggplot(colors_pca, aes(PC1,PC2, col = modelo_dbscan$cluster)) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
ggplot(colors_pca, aes(PC1,PC2, col = modelo_dbscan$cluster)) +
geom_point(alpha = 0.5)
dist(colors_pca)
data  <- read.csv("data/video_games_sales.csv") %>%
mutate(User_Score = as.numeric(User_Score)) %>%
filter(!(is.na(Critic_Score) | is.na(User_Score))) %>%
select(-Global_Sales) %>%
select(Critic_Score, User_Score) %>%
scale() %>%
as_tibble()
data %>% glimpse()
ggplot(data, aes(Critic_Score, USer_Score)) +
geom_point()
ggplot(data, aes(Critic_Score, User_Score)) +
geom_point()
data  <- read.csv("data/video_games_sales.csv") %>%
mutate(User_Score = as.numeric(User_Score)) %>%
filter(!(is.na(Critic_Score) | is.na(User_Score))) %>%
scale() %>%
as_tibble()
data  <- read.csv("data/video_games_sales.csv") %>%
mutate(User_Score = as.numeric(User_Score)) %>%
filter(!(is.na(Critic_Score) | is.na(User_Score))) %>%
as_tibble()
View(data)
data  <- read.csv("data/video_games_sales.csv") %>%
filter(!(is.na(Critic_Score) | is.na(User_Score))) %>%
as_tibble()
data %>% glimpse()
ggplot(data, aes(Critic_Score, User_Score)) +
geom_point()
data_clean <- data %>%   mutate(User_Score = as.numeric(User_Score))
data_clean  <-data %>%
mutate(User_Score = as.numeric(User_Score)) %>%
filter(!(is.na(Critic_Score) | is.na(User_Score))) %>%
as_tibble()
View(data_clean)
data  <- read.csv("data/video_games_sales.csv") %>%
filter(!(is.na(Critic_Score) | is.na(User_Score))) %>%
as_tibble()
data %>% glimpse()
ggplot(data, aes(Critic_Score, User_Score)) +
geom_point()
data_clean  <-data %>%
mutate(User_Score = as.numeric(User_Score)) %>%
filter(!(is.na(Critic_Score) | is.na(User_Score))) %>%
select(Critic_Score, User_Score, User_Count, Global_Sales)
data_clean %>% glimpse()
data_PCA <- data_clean %>%
prcomp() %>%
predict()
View(data_PCA)
data_PCA <- data_clean %>%
prcomp() %>%
predict() %>%
.[,2] %>%
scale()
data_PCA <- data_clean %>%
prcomp() %>%
predict() %>%
.[,1:2] %>%
scale()
data_PCA <- data_clean %>%
prcomp() %>%
predict() %>%
as_tibble() %>%
.[,1:2] %>%
scale()
data_PCA <- data_clean %>%
prcomp() %>%
predict() %>%
.[,1:2] %>%
scale() %>%
as_tibble()
data_PCA2 <- as_tibble(scale(predict(prcomp(data_clean))[,1:2]))
modelo_dbscan <- dbscan(data_PCA, eps = 1, minPts = 5)
ggplot(data_PCA, aes(PC1,PC2, col = modelo_dbscan$cluster)) +
geom_point(alpha = 0.5)
modelo_dbscan <- dbscan(data_PCA, eps = .1, minPts = 5)
ggplot(data_PCA, aes(PC1,PC2, col = modelo_dbscan$cluster)) +
geom_point(alpha = 0.5)
dist(data_PCA)
ggplot(data_PCA, aes(log(PC1),PC2, col = modelo_dbscan$cluster)) +
geom_point(alpha = 0.5)
ggplot(data_PCA, aes(PC1,PC2, col = modelo_dbscan$cluster)) +
geom_point(alpha = 0.5)
? prcomp
data_PCA <- data_clean %>%
prcomp(scale. = TRUE) %>%
predict() %>%
.[,1:2] %>%
as_tibble()
data_PCA2 <- as_tibble(predict(prcomp(data_clean, scale. = TRUE)[,1:2]))
data_PCA <- data_clean %>%
prcomp(scale. = TRUE) %>%
predict() %>%
.[,1:2] %>%
as_tibble()
data_PCA2 <- as_tibble(predict(prcomp(data_clean, scale. = TRUE))[,1:2])
modelo_dbscan <- dbscan(data_PCA, eps = .1, minPts = 5)
ggplot(data_PCA, aes(PC1,PC2, col = modelo_dbscan$cluster)) +
geom_point(alpha = 0.5)
? dbscan
kNNdistplot(data_PCA, k = 4)
modelo_dbscan <- dbscan(data_PCA, eps = 7000, minPts = 5)
ggplot(data_PCA, aes(PC1,PC2, col = modelo_dbscan$cluster)) +
geom_point(alpha = 0.5)
kNNdistplot(data_PCA, k = 4)
kNNdistplot(data_PCA, k = 4)
abline(h=.7, col = "red", lty = 2)
modelo_dbscan <- dbscan(data_PCA, eps = 0.7, minPts = 5)
ggplot(data_PCA, aes(PC1,PC2, col = modelo_dbscan$cluster)) +
geom_point(alpha = 0.5)
modelo_dbscan <- dbscan(data_PCA, eps = 0.5, minPts = 5)
ggplot(data_PCA, aes(PC1,PC2, col = modelo_dbscan$cluster)) +
geom_point(alpha = 0.5)
pacman::p_load(dbscan, tidyverse, tsne)
data_tsne <- data_clean %>% Rtsne()
data_tsne <- data_clean %>% rtsne()
data_tsne <- data_clean %>% Rtsne()
pacman::p_load(dbscan, tidyverse, Rtsne)
data_tsne <- data_clean %>% Rtsne()
data_tsne <- data_clean %>% unique() %>% Rtsne()
geom_point(alpha = 0.5)
ggplot(data_PCA, aes(PC1,PC2)) +
geom_point(alpha = 0.5)
data_tsne <- data_clean %>%
unique() %>%
Rtsne() %>%
.$Y
data_tsne <- data_clean %>%
unique() %>%
Rtsne() %>%
.$Y %>%
as_tibble()
data_tsne <- data_clean %>%
unique() %>%
Rtsne() %>%
.$Y
View(data_tsne)
ggplot(data_tsne, aes(V1,V2)) +
geom_point(alpha = 0.5)
data_tsne <- data_clean %>%
unique() %>%
Rtsne() %>%
.$Y %>%
as.data.frame()
ggplot(data_tsne, aes(V1,V2)) +
geom_point(alpha = 0.5)
kNNdistplot(data_tsne, k = 4)
abline(h=.7, col = "red", lty = 2)
abline(h=.9, col = "red", lty = 2)
abline(h=.1, col = "red", lty = 2)
abline(h=1, col = "red", lty = 2)
abline(h=1.5, col = "red", lty = 2)
abline(h=1.2, col = "red", lty = 2)
par(new)
modelo_dbscan <- dbscan(data_PCA, eps = 1.2, minPts = 5)
ggplot(data_tsne, aes(V1, V2, col = modelo_dbscan$cluster)) +
geom_point(alpha = 0.5)
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 5)
ggplot(data_tsne, aes(V1, V2, col = modelo_dbscan$cluster)) +
geom_point(alpha = 0.5)
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5)
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 15)
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5)
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 10)
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5)
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 15)
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5)
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
# visualizo grafico de kNN
kNNdistplot(data_tsne, k = 4)
abline(h=1.2, col = "red", lty = 2)
dev.off()
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 15)
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
# visualizo grafico de kNN
kNNdistplot(data_tsne, k = 4)
pacman::p_load(dbscan, tidyverse, Rtsne)
# cargo datos
data  <- read.csv("data/video_games_sales.csv") %>%
filter(!(is.na(Critic_Score) | is.na(User_Score))) %>%
as_tibble()
View(data)
# les echo un vistazo
data %>% glimpse()
# grafico exploratorio
ggplot(data, aes(Critic_Score, User_Score)) +
geom_point()
# limpio los NAs, cambio a numerico
data_clean <- data %>%
mutate(User_Score = as.numeric(User_Score)) %>%
filter(!(is.na(Critic_Score) | is.na(User_Score))) %>%
select(Critic_Score, User_Score, User_Count, Global_Sales)
View(data_clean)
# echo un vistazo
data_clean %>% glimpse()
# extraigo los componentes principales usando el operador %>%
data_PCA <- data_clean %>%
prcomp(scale. = TRUE) %>%
predict() %>%
.[,1:2] %>%
as_tibble()
# hago lo mismo utilizando R base
data_PCA2 <- as_tibble(predict(prcomp(data_clean, scale. = TRUE))[,1:2])
# visualizo PCA
ggplot(data_PCA, aes(PC1, PC2)) +
geom_point(alpha = 0.5)
# extraigo dimensiones obtenidas del tsne
data_tsne <- data_clean %>%
unique() %>%
Rtsne() %>%
.$Y %>%
as.data.frame()
# visualizo tsne
ggplot(data_tsne, aes(V1, V2)) +
geom_point(alpha = 0.5)
set.seed(42)
# extraigo dimensiones obtenidas del tsne
data_tsne <- data_clean %>%
unique() %>%
Rtsne() %>%
.$Y %>%
as.data.frame()
# visualizo tsne
ggplot(data_tsne, aes(V1, V2)) +
geom_point(alpha = 0.5)
# visualizo grafico de kNN
kNNdistplot(data_tsne, k = 4)
abline(h=1.2, col = "red", lty = 2)
dev.off()
? dbscan
# hago un DBScan con parametro observado
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 15)
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
# hago un DBScan con parametro observado
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 50)
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
# hago un DBScan con parametro observado
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 25)
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
# hago un DBScan con parametro observado
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 20)
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
# hago un DBScan con parametro observado
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 5)
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none") +
scale_color_viridis_d()
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none") +
scale_color_manual(colors = colors())
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none") +
scale_color_manual(values = colors())
colors()
modelo_dbscan$cluster
modelo_dbscan$cluster %>% max()
max(modelo_dbscan$cluster)
modelo_dbscan$cluster %>% unique()
modelo_dbscan$cluster %>% unique() %>% length()
# limpio los NAs, cambio a numerico
data_clean <- data %>%
mutate(User_Score = as.numeric(User_Score)) %>%
filter(!(is.na(Critic_Score) | is.na(User_Score))) %>%
select(Critic_Score, User_Score, User_Count, Global_Sales) %>%
unique()
estad <- data_clean %>%
mutate(cluster = modelo_dbscan$cluster)
View(estad)
estad <- data_clean %>%
mutate(cluster = modelo_dbscan$cluster) %>%
group_by(cluster) %>%
summarise(mean)
estad <- data_clean %>%
mutate(cluster = modelo_dbscan$cluster) %>%
group_by(cluster) %>%
summarise(across(., list("mean", "sd")))
estad <- data_clean %>%
mutate(cluster = modelo_dbscan$cluster) %>%
group_by(cluster) %>%
summarise(across(., list(mean, sd)))
estad <- data_clean %>%
mutate(cluster = modelo_dbscan$cluster) %>%
group_by(cluster) %>%
summarise(mean(User_Score))
View(estad)
estad <- data_clean %>%
mutate(cluster = modelo_dbscan$cluster) %>%
group_by(cluster) %>%
summarise(mean(User_Score),
mean(Critic_Score),
mean(Global_Sales),
mean(User_Count))
View(estad)

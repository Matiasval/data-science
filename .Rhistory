keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
knn_mod <- nearest_neighbor() %>%
set_mode("classification")
flights_wflow <-
workflow() %>%
add_model(knn_mod) %>%
add_recipe(flights_rec)
# ajuste con data entrenamiento
flights_fit <-
flights_wflow %>%
fit(data = train_data)
# amplificacion data test con predicciones
flights_aug <-
augment(flights_fit, test_data)
flights_aug %>%
roc_auc(truth = arr_delay, .pred_on_time)
flights_aug %>%
roc_auc(truth = arr_delay, .pred_late)
flights_aug %>%
roc_curve(truth = arr_delay, .pred_late) %>%
autoplot()
knn_mod <- naive_Bayes(mode = "classification",
engine = "klaR")
flights_wflow <-
workflow() %>%
add_model(knn_mod) %>%
add_recipe(flights_rec)
# ajuste con data entrenamiento
flights_fit <-
flights_wflow %>%
fit(data = train_data)
knn_mod <- naive_Bayes()
knn_mod <- naive_Bayes() %>%
set_mode("classification")
flights_wflow <-
workflow() %>%
add_model(knn_mod) %>%
add_recipe(flights_rec)
# ajuste con data entrenamiento
flights_fit <-
flights_wflow %>%
fit(data = train_data)
NB_mod <- naive_Bayes() %>%
set_mode("classification")
flights_wflow <-
workflow() %>%
add_model(NB_mod) %>%
add_recipe(flights_rec)
# ajuste con data entrenamiento
flights_fit <-
flights_wflow %>%
fit(data = train_data)
? naive_Bayes
library(klaR)
install.packages("klaR")
pacman::p_load(tidymodels, tidyverse, nycflights13, klaR)
NB_mod <- naive_Bayes() %>%
set_mode("classification")
flights_wflow <-
workflow() %>%
add_model(NB_mod) %>%
add_recipe(flights_rec)
# ajuste con data entrenamiento
flights_fit <-
flights_wflow %>%
fit(data = train_data)
# especifico receta ----
flights_rec <-
recipe(arr_delay ~ ., data = flight_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
#  step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
NB_mod <- naive_Bayes() %>%
set_mode("classification")
flights_wflow <-
workflow() %>%
add_model(NB_mod) %>%
add_recipe(flights_rec)
# ajuste con data entrenamiento
flights_fit <-
flights_wflow %>%
fit(data = train_data)
rlang::last_error()
rlang::last_trace()
NB_mod <- naive_Bayes() %>%
set_mode("classification") %>%
set_engine("klaR") %>%
set_args(usekernel = FALSE)
flights_wflow <-
workflow() %>%
add_model(NB_mod) %>%
add_recipe(flights_rec)
# especifico receta ----
flights_rec <-
recipe(arr_delay ~ ., data = flight_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
NB_mod <- naive_Bayes() %>%
set_mode("classification") %>%
set_engine("klaR") %>%
set_args(usekernel = FALSE)
flights_wflow <-
workflow() %>%
add_model(NB_mod) %>%
add_recipe(flights_rec)
# ajuste con data entrenamiento
flights_fit <-
flights_wflow %>%
fit(data = train_data)
# especifico receta ----
flights_rec <-
recipe(arr_delay ~ distance, data = flight_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
flights_rec <-
recipe(arr_delay ~ distance, data = flight_data)
NB_mod <- naive_Bayes() %>%
set_mode("classification") %>%
set_engine("klaR") %>%
set_args(usekernel = FALSE)
flights_wflow <-
workflow() %>%
add_model(NB_mod) %>%
add_recipe(flights_rec)
# ajuste con data entrenamiento
flights_fit <-
flights_wflow %>%
fit(data = train_data)
NB_mod <- naive_Bayes() %>%
set_mode("classification") %>%
set_engine("klaR") %>%
set_args(usekernel = FALSE)
flights_wflow <-
workflow() %>%
add_model(NB_mod) %>%
add_recipe(flights_rec)
# ajuste con data entrenamiento
flights_fit <-
flights_wflow %>%
fit(data = train_data)
pacman::p_load(tidymodels, tidyverse, nycflights13, klaR)
set.seed(42)
# cargar y limpiar datos ----
flight_data <-
flights %>%
mutate(
# discretiza arr_delay y lo hace factor
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
# obtengo solo la fecha a partir de fecha con hora
date = lubridate::as_date(time_hour)
) %>%
# combino con data de clima
inner_join(weather, by = c("origin", "time_hour")) %>%
# especifico las columnas de interes
select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
# excluyo datos faltates
na.omit() %>%
# transformo characteres en factores
mutate_if(is.character, as.factor)  %>%
# tomo una muestra de tamaño 10.000 para poder ejecutar los modelos
sample_n(10000)
data_split <- initial_split(flight_data, prop = 3/4)
pacman::p_load(tidymodels, tidyverse, nycflights13, klaR)
set.seed(42)
# cargar y limpiar datos ----
flight_data <-
flights %>%
mutate(
# discretiza arr_delay y lo hace factor
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
# obtengo solo la fecha a partir de fecha con hora
date = lubridate::as_date(time_hour)
) %>%
# combino con data de clima
inner_join(weather, by = c("origin", "time_hour")) %>%
# especifico las columnas de interes
select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
# excluyo datos faltates
na.omit() %>%
# transformo characteres en factores
mutate_if(is.character, as.factor)  %>%
# tomo una muestra de tamaño 10.000 para poder ejecutar los modelos
sample_n(10000)
flight_data <-
flights %>%
mutate(
# discretiza arr_delay y lo hace factor
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
# obtengo solo la fecha a partir de fecha con hora
date = lubridate::as_date(time_hour)
) %>%
# combino con data de clima
inner_join(weather, by = c("origin", "time_hour"))
# cargar y limpiar datos ----
flight_data <-
flights %>%
mutate(
# discretiza arr_delay y lo hace factor
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
# obtengo solo la fecha a partir de fecha con hora
date = lubridate::as_date(time_hour)
) %>%
# combino con data de clima
inner_join(weather, by = c("origin", "time_hour")) %>%
# especifico las columnas de interes
select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour)
# cargar y limpiar datos ----
flight_data <-
flights %>%
mutate(
# discretiza arr_delay y lo hace factor
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
# obtengo solo la fecha a partir de fecha con hora
date = lubridate::as_date(time_hour)
) %>%
# combino con data de clima
inner_join(weather, by = c("origin", "time_hour")) %>%
# especifico las columnas de interes
dplyr::select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
# excluyo datos faltates
na.omit() %>%
# transformo characteres en factores
mutate_if(is.character, as.factor)  %>%
# tomo una muestra de tamaño 10.000 para poder ejecutar los modelos
sample_n(10000)
data_split <- initial_split(flight_data, prop = 3/4)
train_data <- training(data_split)
test_data  <- testing(data_split)
# especifico receta ----
flights_rec <-
recipe(arr_delay ~ ., data = flight_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
NB_mod <- naive_Bayes() %>%
set_mode("classification") %>%
set_engine("klaR") %>%
set_args(usekernel = FALSE)
flights_wflow <-
workflow() %>%
add_model(NB_mod) %>%
add_recipe(flights_rec)
# ajuste con data entrenamiento
flights_fit <-
flights_wflow %>%
fit(data = train_data)
?fit
# ajuste con data entrenamiento
flights_fit <-
flights_wflow %>%
parsnip::fit(data = train_data)
knitr::opts_chunk$set(echo = TRUE)
data <- read_csv("Churn_Modelling.csv")
View(data)
data$RowNumber <- NULL
data$Surname <- NULL
data$Geography <- NULL
data$is_female <- (data$Gender == "Female") %>% as.numeric()
data$Gender <- NULL
View(data)
modeloNB <- naiveBayes(Exited ~ ., data = trainData)
library(e1071)
modeloNB <- naiveBayes(Exited ~ ., data = trainData)
set.seed(42)
sample <- sample(1:nrow(data), .8*10000)
trainData <- data[sample,]
testData <- data[-sample,]
modeloNB <- naiveBayes(Exited ~ ., data = trainData)
pred <- predict(modeloNB, testData, type ="raw")
modeloNB
# especifico receta ----
flights_rec <-
recipe(arr_delay ~ all_numeric(), data = flight_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
# especifico receta ----
flights_rec <-
recipe(arr_delay ~ , data = flight_data) %>%
select(all_numeric()) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
flights_rec <-
recipe(arr_delay ~ , data = flight_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_rm(!all_numeric_predictors())
flights_rec <-
recipe(arr_delay ~ ., data = flight_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_rm(!all_numeric_predictors())
NB_mod <- naive_Bayes() %>%
set_mode("classification") %>%
set_engine("klaR") %>%
set_args(usekernel = FALSE)
flights_wflow <-
workflow() %>%
add_model(NB_mod) %>%
add_recipe(flights_rec)
# ajuste con data entrenamiento
flights_fit <-
flights_wflow %>%
parsnip::fit(data = train_data)
# ajuste con data entrenamiento
flights_fit <-
flights_wflow %>%
fit(data = train_data)
# especifico receta ----
flights_rec <-
recipe(arr_delay ~ ., data = flight_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
#  step_rm(!all_numeric_predictors()) %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
NB_mod <- naive_Bayes() %>%
set_mode("classification") %>%
set_engine("klaR") %>%
set_args(usekernel = FALSE)
flights_wflow <-
workflow() %>%
add_model(NB_mod) %>%
add_recipe(flights_rec)
# ajuste con data entrenamiento
flights_fit <-
flights_wflow %>%
fit(data = train_data)
flights_wflow <-
workflow() %>%
add_recipe(flights_rec) %>%
add_model(NB_mod)
# ajuste con data entrenamiento
flights_fit <-
flights_wflow %>%
fit(data = train_data)
? step_impute_knn
pacman::p_load(tidyverse, tidymodels, palmerpenguins, discrim)
pacman::p_load(tidyverse, tidymodels, palmerpenguins, discrim, klaR)
set.seed(42)
pacman::p_load(tidyverse, tidymodels, palmerpenguins, discrim, klaR)
set.seed(42)
## cargamos data ----
penguins %>%
head()
penguins %>%
summarize(across(.cols = everything(), ~sum(is.na(.))))
penguins %>%
filter(is.na(sex))
## quitamos filas con NA
penguins_cleaned <- penguins %>%
filter(!is.na(bill_depth_mm))
penguin_split <- initial_split(penguins_cleaned, strata = "species")
train <- training(penguin_split)
test <- testing(penguin_split)
cv_folds <- vfold_cv(
data = train,
v = 5)
cv_folds
nb_model <- naive_Bayes() %>%
set_mode("classification") %>%
set_engine("klaR")
# receta
penguins_rec <- recipe(
species ~ . ,
data = train
) %>%
step_impute_knn( # para imputar datos faltantes con knn
sex,
neighbors = 3
) %>%
update_role(
year, island,
new_role = "ID"
)
penguins_wf <- workflow() %>%
add_recipe(penguins_rec) %>%
add_model(nb_model)
nb_fit <- penguins_wf %>%
fit_resamples(
resamples = cv_folds
)
collect_metrics(nb_fit)
nb_final <- penguins_wf %>%
last_fit(
split = penguin_split
)
collect_metrics(nb_final)
nb_test_pred <- bind_cols(
test,
nb_final %>% collect_predictions() %>% dplyr::select(starts_with(".pred_"))
)
table("predicted class" = nb_test_pred$.pred_class,
"observed class" = nb_test_pred$species)
nb_test_pred %>%
roc_curve(
truth = species,
.pred_Adelie, .pred_Chinstrap, .pred_Gentoo
) %>%
autoplot()
pacman::p_load(tidyverse, tidymodels, palmerpenguins, discrim, klaR, kknn)
nb_test_pred %>%
roc_curve(
truth = species,
.pred_Adelie, .pred_Chinstrap, .pred_Gentoo
) %>%
autoplot()
# empaquetamos
evaluar_modelo <- function(model){
penguins_wf <- workflow() %>%
add_recipe(penguins_rec) %>%
add_model(model)
# Ajustamos el modelo ----
nb_fit <- penguins_wf %>%
fit_resamples(
resamples = cv_folds
)
collect_metrics(nb_fit)
# predecimos con data de prueba
nb_final <- penguins_wf %>%
last_fit(split = penguin_split)
collect_metrics(nb_final)
nb_test_pred <- bind_cols(
test,
nb_final %>% collect_predictions() %>% dplyr::select(starts_with(".pred_"))
)
table("predicted class" = nb_test_pred$.pred_class,
"observed class" = nb_test_pred$species)
nb_test_pred %>%
roc_curve(
truth = species,
.pred_Adelie, .pred_Chinstrap, .pred_Gentoo
) %>%
autoplot()
}
evaluar_modelo(nb_model)
# empaquetamos
evaluar_modelo <- function(model){
penguins_wf <- workflow() %>%
add_recipe(penguins_rec) %>%
add_model(model)
# Ajustamos el modelo ----
nb_fit <- penguins_wf %>%
fit_resamples(
resamples = cv_folds
)
print(collect_metrics(nb_fit))
# predecimos con data de prueba
nb_final <- penguins_wf %>%
last_fit(split = penguin_split)
print(collect_metrics(nb_final))
nb_test_pred <- bind_cols(
test,
nb_final %>% collect_predictions() %>% dplyr::select(starts_with(".pred_"))
)
print(table("predicted class" = nb_test_pred$.pred_class,
"observed class" = nb_test_pred$species))
nb_test_pred %>%
roc_curve(
truth = species,
.pred_Adelie, .pred_Chinstrap, .pred_Gentoo
) %>%
autoplot()
}
evaluar_modelo(nb_model)
knn_model <- nearest_neighbor() %>%
set_mode("classification")
evaluar_modelo(knn_model)
# probamos la funcion con dos tipos de modelos
evaluar_modelo(nb_model)
knn_model <- nearest_neighbor() %>%
set_mode("classification")
evaluar_modelo(knn_model)

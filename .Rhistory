draw_key = draw_key_polygon,
draw_group = function(data, panel_params, coord) {
n <- nrow(data)
if (n <= 2) return(grid::nullGrob())
coords <- coord$transform(data, panel_params)
# A polygon can only have a single colour, fill, etc, so take from first row
first_row <- coords[1, , drop = FALSE]
grid::polygonGrob(
coords$x, coords$y,
default.units = "native",
gp = grid::gpar(
col = first_row$colour,
fill = scales::alpha(first_row$fill, first_row$alpha),
lwd = first_row$size * .pt,
lty = first_row$linetype
)
)
}
)
geom_simple_polygon <- function(mapping = NULL, data = NULL, stat = "chull",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
geom = GeomSimplePolygon, mapping = mapping, data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_simple_polygon(aes(colour = class), fill = NA)
geom_simple_polygon <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
geom = GeomSimplePolygon, mapping = mapping, data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_simple_polygon(aes(colour = class), fill = NA)
GeomSimplePolygon <- ggproto("GeomPolygon", Geom,
required_aes = c("x", "y"),
default_aes = aes(
colour = NA, fill = "grey20", size = 0.5,
linetype = 1, alpha = 1
),
draw_key = draw_key_polygon,
draw_group = function(data, panel_params, coord) {
n <- nrow(data)
if (n <= 2) return(grid::nullGrob())
coords <- coord$transform(data, panel_params)
# A polygon can only have a single colour, fill, etc, so take from first row
first_row <- coords[1, , drop = FALSE]
grid::polygonGrob(
star(points = 5, rotation_angle = 0, center=c(coords$x,coords$y), radius = 1),
default.units = "native",
gp = grid::gpar(
col = first_row$colour,
fill = scales::alpha(first_row$fill, first_row$alpha),
lwd = first_row$size * .pt,
lty = first_row$linetype
)
)
}
)
geom_simple_polygon <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
geom = GeomSimplePolygon, mapping = mapping, data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_simple_polygon(aes(colour = class), fill = NA)
star <- function(points = 5, rotation_angle = 0, center=c(0,0), radius = 1){
d_angle <- pi/points
theta <- seq(0, 2*pi, by = d_angle) + rotation_angle
mult <- cos((23-points)/45*pi)
amplitudes <- rep(c(radius,mult*radius/cos(d_angle)),(points+1))[-2*(points+1)]
x <- amplitudes * cos(theta) + center[1]
y <- amplitudes * sin(theta) + center[2]
return(rbind(data.frame(x,y)))
}
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_simple_polygon(aes(colour = class), fill = NA)
GeomSimplePolygon <- ggproto("GeomPolygon", Geom,
required_aes = c("x", "y"),
default_aes = aes(
colour = NA, fill = "grey20", size = 0.5,
linetype = 1, alpha = 1
),
draw_key = draw_key_polygon,
draw_group = function(data, panel_params, coord) {
n <- nrow(data)
if (n <= 2) return(grid::nullGrob())
coords <- coord$transform(data, panel_params)
# A polygon can only have a single colour, fill, etc, so take from first row
first_row <- coords[1, , drop = FALSE]
grid::polygonGrob(
as.numeric(star(points = 5, rotation_angle = 0, center=c(coords$x,coords$y), radius = 1)),
default.units = "native",
gp = grid::gpar(
col = first_row$colour,
fill = scales::alpha(first_row$fill, first_row$alpha),
lwd = first_row$size * .pt,
lty = first_row$linetype
)
)
}
)
geom_simple_polygon <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
geom = GeomSimplePolygon, mapping = mapping, data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_simple_polygon(aes(colour = class), fill = NA)
knn_model <- nearest_neighbor() %>%
set_mode("classification")
evaluar_modelo(knn_model)
evaluar_modelo(knn_model, flights_rec, fligth_split)
# Chilean Flag
library(ggplot2)
c <- data.frame(x1=c(1,3,1), x2=c(3,6,6),
y1=c(2,2,0), y2=c(4,4,2),
cols = c('navyblue', 'white', 'red3'))
star <- function(points = 5, rotation_angle = 0, center=c(0,0), radius = 1){
d_angle <- pi/points
theta <- seq(0, 2*pi, by = d_angle) + rotation_angle
mult <- cos((23-points)/45*pi)
amplitudes <- rep(c(radius,mult*radius/cos(d_angle)),(points+1))[-2*(points+1)]
x <- amplitudes * cos(theta) + center[1]
y <- amplitudes * sin(theta) + center[2]
return(rbind(data.frame(x,y)))
}
estrella <- star(points = 5, rotation_angle = pi/10, center = c(2, 3), radius = 0.8)
ggplot() +
geom_rect(data=c, mapping=aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2), fill = c$cols) +
geom_polygon(data=estrella, aes(x=x,y=y), fill = "white", col="white") +
theme_void() +
coord_equal()
puntos <- data.frame(x=runif(50),y=rnorm(50))
ggplot(puntos, aes(x,y)) +
geom_point()
c(puntos$x[1], puntos$y[1])
estrellas <- star(points = 5, rotation_angle = pi/10, radius = 0.1, center = c(puntos$x[1], puntos$y[1]))
estrellas <- purrr::map(1:nrow(puntos),star(points = 5, rotation_angle = pi/10, radius = 0.1, center = c(puntos$x[1], puntos$y[1])))
1:nrow(puntos)
estrellas <- purrr::map(1:nrow(puntos),function(i) star(points = 5, rotation_angle = pi/10, radius = 0.1, center = c(puntos$x[i], puntos$y[i])))
View(estrellas)
estrellas <- purrr::map(1:nrow(puntos),function(i) star(points = 5, rotation_angle = pi/10, radius = 0.1, center = c(puntos$x[i], puntos$y[i])) %>% mutate(id = i))
estrellas <- purrr::map_dfr(1:nrow(puntos),
function(i)
star(points = 5,
rotation_angle = pi/10,
radius = 0.1,
center = c(puntos$x[i], puntos$y[i])) %>%
mutate(id = i)
)
View(estrellas)
ggplot(puntos, aes(x,y)) +
geom_point() +
geom_polygon(data=estrella, aes(x=x,y=y, group=id)) +
theme_void()
ggplot(puntos, aes(x,y)) +
geom_point() +
geom_polygon(data=estrella, aes(x=x,y=y, group=id))
ggplot(puntos, aes(x,y)) +
geom_point() +
geom_polygon(data=estrellas, aes(x=x,y=y, group=id))
ggplot(puntos, aes(x,y)) +
geom_point() +
geom_polygon(data=estrellas, aes(x=x,y=y, group=id)) +
coord_equal()
puntos <- data.frame(x=runif(50),y=runif(50))
ggplot(puntos, aes(x,y)) +
geom_point()
estrellas <- purrr::map_dfr(1:nrow(puntos),
function(i)
star(points = 5,
rotation_angle = pi/10,
radius = 0.1,
center = c(puntos$x[i], puntos$y[i])) %>%
mutate(id = i)
)
ggplot(puntos, aes(x,y)) +
geom_point() +
geom_polygon(data=estrellas, aes(x=x,y=y, group=id)) +
coord_equal()
estrellas <- purrr::map_dfr(1:nrow(puntos),
function(i)
star(points = 9,
rotation_angle = pi/10,
radius = 0.1,
center = c(puntos$x[i], puntos$y[i])) %>%
mutate(id = i)
)
ggplot(puntos, aes(x,y)) +
geom_point() +
geom_polygon(data=estrellas, aes(x=x,y=y, group=id)) +
coord_equal()
GeomSimplePolygon <-
ggproto("GeomPolygon", Geom,
required_aes = c("x", "y"),
default_aes = aes(
colour = NA, fill = "grey20", size = 0.5,
linetype = 1, alpha = 1
),
draw_key = draw_key_polygon,
draw_group = function(data, panel_params, coord) {
coords <- coord$transform(data, panel_params)
stars <- purrr::map_dfr(1:nrow(coords),
function(i)
star(points = 9,
rotation_angle = pi/10,
radius = 0.1,
center = c(coords$x[i], coords$y[i])) %>%
mutate(id = i))
# A polygon can only have a single colour, fill, etc, so take from first row
first_row <- coords[1, , drop = FALSE]
grid::polygonGrob(
stars$x, stars$y,
default.units = "native",
gp = grid::gpar(
group = stars$i,
col = first_row$colour,
fill = scales::alpha(first_row$fill, first_row$alpha),
lwd = first_row$size * .pt,
lty = first_row$linetype
)
)
}
)
geom_simple_polygon <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
geom = GeomSimplePolygon, mapping = mapping, data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_simple_polygon(aes(colour = class), fill = NA)
GeomStar <-
ggproto("GeomPolygon", Geom,
required_aes = c("x", "y"),
default_aes = aes(
colour = NA, fill = "grey20", size = 0.5,
linetype = 1, alpha = 1
),
draw_key = draw_key_polygon,
draw_group = function(data, panel_params, coord) {
coords <- coord$transform(data, panel_params)
stars <- purrr::map_dfr(1:nrow(coords),
function(i)
star(points = 9,
rotation_angle = pi/10,
radius = 0.1,
center = c(coords$x[i], coords$y[i])) %>%
mutate(id = i))
# A polygon can only have a single colour, fill, etc, so take from first row
first_row <- coords[1, , drop = FALSE]
grid::polygonGrob(
stars$x, stars$y,
default.units = "native",
gp = grid::gpar(
group = stars$i,
col = first_row$colour,
fill = scales::alpha(first_row$fill, first_row$alpha),
lwd = first_row$size * .pt,
lty = first_row$linetype
)
)
}
)
geom_star <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
geom = GeomSimplePolygon, mapping = mapping, data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_star()
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_star( fill = NA)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = "class"), fill = NA)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
ggplot(mpg[1:2,], aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
ggplot(mpg[1:3,], aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
GeomStar <-
ggproto("GeomPolygon", Geom,
required_aes = c("x", "y"),
default_aes = aes(
colour = NA, fill = "grey20", size = 0.5,
linetype = 1, alpha = 1
),
draw_key = draw_key_polygon,
draw_group = function(data, panel_params, coord) {
coords <- coord$transform(data, panel_params)
stars <- purrr::map_dfr(1:nrow(coords),
function(i)
star(points = 9,
rotation_angle = pi/10,
radius = 0.1,
center = c(coords$x[i], coords$y[i])) %>%
mutate(id = i))
# A polygon can only have a single colour, fill, etc, so take from first row
first_row <- coords[1, , drop = FALSE]
grid::polygonGrob(
stars$x, stars$y,
default.units = "native",
gp = grid::gpar(
group = stars$id,
col = first_row$colour,
fill = scales::alpha(first_row$fill, first_row$alpha),
lwd = first_row$size * .pt,
lty = first_row$linetype
)
)
}
)
geom_star <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
geom = GeomSimplePolygon, mapping = mapping, data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
ggplot(mpg[1:3,], aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
GeomStar <-
ggproto("GeomPolygon", Geom,
required_aes = c("x", "y"),
default_aes = aes(
colour = NA, fill = "grey20", size = 0.5,
linetype = 1, alpha = 1
),
draw_key = draw_key_polygon,
draw_group = function(data, panel_params, coord) {
coords <- coord$transform(data, panel_params)
stars <- purrr::map_dfr(1:nrow(coords),
function(i)
star(points = 9,
rotation_angle = pi/10,
radius = 0.1,
center = c(coords$x[i], coords$y[i])) %>%
mutate(id = i))
# A polygon can only have a single colour, fill, etc, so take from first row
first_row <- coords[1, , drop = FALSE]
grid::polygonGrob(
stars$x, stars$y,
default.units = "native",
gp = grid::gpar(
group = stars$id,
col = coords$colour,
fill = scales::alpha(coords$fill, coords$alpha),
lwd = coords$size * .pt,
lty = coords$linetype
)
)
}
)
geom_star <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
geom = GeomSimplePolygon, mapping = mapping, data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
ggplot(mpg[1:3,], aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
ggplot(mpg[1:3,], aes(displ, hwy)) +
geom_point() +
geom_star()
ggplot(mpg[1:3,], aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
ggplot(mpg[1:3,], aes(displ, hwy)) +
geom_point() +
geom_star(aes(group = class), fill = NA)
ggplot(mpg[1:3,], aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
? map
? split
cars |> split(mpg)
cars |> split("mpg")
cars
pacman::p_load(tidymodels, tidyverse, nycflights13)
set.seed(42)
# cargar y limpiar datos ----
flight_data <-
flights %>%
mutate(
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
date = lubridate::as_date(time_hour)
) %>%
inner_join(weather, by = c("origin", "time_hour")) %>%
dplyr::select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
na.omit() %>%
mutate_if(is.character, as.factor)  %>%
sample_n(10000)
# receta
flights_rec <-
recipe(arr_delay ~ ., data = flight_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
# Especificamos modelo
model <- logistic_reg() %>%
set_mode("classification") %>%
set_engine("glm")
# Dividimos data ----
fligth_split <- initial_split(flight_data, strata = "arr_delay")
train <- training(fligth_split)
test <- testing(fligth_split)
# validacion cruzada
cv_folds <- vfold_cv(data = train, v = 5)
evaluar_modelo <- function(model, recipe, data_split){
model_wf <- workflow() %>%
add_recipe(recipe) %>%
add_model(model)
nb_fit <- model_wf %>%
fit_resamples(resamples = cv_folds)
print(collect_metrics(nb_fit))
nb_final <- model_wf %>%
last_fit(split = data_split)
print(collect_metrics(nb_final))
nb_test_pred <- bind_cols(
test,
nb_final %>% collect_predictions() %>% dplyr::select(starts_with(".pred_"))
)
print(table("predicted class" = nb_test_pred$.pred_class,
"observed class" = nb_test_pred$arr_delay))
}
evaluar_modelo(model, flights_rec, fligth_split)
model_wf <- workflow() %>%
add_recipe(recipe) %>%
add_model(model)
recipe = flights_rec
model_wf <- workflow() %>%
add_recipe(recipe) %>%
add_model(model)
nb_fit <- model_wf %>%
fit_resamples(resamples = cv_folds)
model %>% fit()
model %>% fit(test)
model %>% fit(data=test)
model %>% fit(arr_delay~., data=test)
model %>% fit(arr_delay~., data=test) %>% tidy()
# vemos resultados de una iteracion del modelo
model %>%
fit(arr_delay~., data=test) %>%
tidy()
# vemos resultados de una iteracion del modelo
model %>%
fit(arr_delay~., data=test) %>%
tidy() -> parametros
View(parametros)
options(scipen = 999)
# vemos resultados de una iteracion del modelo
model %>%
fit(arr_delay~., data=test) %>%
tidy() -> parametros
# vemos resultados de una iteracion del modelo
parametros <- model %>%
fit(arr_delay~., data=test) %>%
tidy()
view(parametros)
(tidymodels, tidyverse, nycflights13)

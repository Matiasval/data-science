# A polygon can only have a single colour, fill, etc, so take from first row
first_row <- coords[1, , drop = FALSE]
grid::polygonGrob(
stars$x, stars$y,
default.units = "native",
gp = grid::gpar(
group = stars$i,
col = first_row$colour,
fill = scales::alpha(first_row$fill, first_row$alpha),
lwd = first_row$size * .pt,
lty = first_row$linetype
)
)
}
)
geom_simple_polygon <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
geom = GeomSimplePolygon, mapping = mapping, data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_simple_polygon(aes(colour = class), fill = NA)
GeomStar <-
ggproto("GeomPolygon", Geom,
required_aes = c("x", "y"),
default_aes = aes(
colour = NA, fill = "grey20", size = 0.5,
linetype = 1, alpha = 1
),
draw_key = draw_key_polygon,
draw_group = function(data, panel_params, coord) {
coords <- coord$transform(data, panel_params)
stars <- purrr::map_dfr(1:nrow(coords),
function(i)
star(points = 9,
rotation_angle = pi/10,
radius = 0.1,
center = c(coords$x[i], coords$y[i])) %>%
mutate(id = i))
# A polygon can only have a single colour, fill, etc, so take from first row
first_row <- coords[1, , drop = FALSE]
grid::polygonGrob(
stars$x, stars$y,
default.units = "native",
gp = grid::gpar(
group = stars$i,
col = first_row$colour,
fill = scales::alpha(first_row$fill, first_row$alpha),
lwd = first_row$size * .pt,
lty = first_row$linetype
)
)
}
)
geom_star <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
geom = GeomSimplePolygon, mapping = mapping, data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_star()
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_star( fill = NA)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = "class"), fill = NA)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
ggplot(mpg[1:2,], aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
ggplot(mpg[1:3,], aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
GeomStar <-
ggproto("GeomPolygon", Geom,
required_aes = c("x", "y"),
default_aes = aes(
colour = NA, fill = "grey20", size = 0.5,
linetype = 1, alpha = 1
),
draw_key = draw_key_polygon,
draw_group = function(data, panel_params, coord) {
coords <- coord$transform(data, panel_params)
stars <- purrr::map_dfr(1:nrow(coords),
function(i)
star(points = 9,
rotation_angle = pi/10,
radius = 0.1,
center = c(coords$x[i], coords$y[i])) %>%
mutate(id = i))
# A polygon can only have a single colour, fill, etc, so take from first row
first_row <- coords[1, , drop = FALSE]
grid::polygonGrob(
stars$x, stars$y,
default.units = "native",
gp = grid::gpar(
group = stars$id,
col = first_row$colour,
fill = scales::alpha(first_row$fill, first_row$alpha),
lwd = first_row$size * .pt,
lty = first_row$linetype
)
)
}
)
geom_star <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
geom = GeomSimplePolygon, mapping = mapping, data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
ggplot(mpg[1:3,], aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
GeomStar <-
ggproto("GeomPolygon", Geom,
required_aes = c("x", "y"),
default_aes = aes(
colour = NA, fill = "grey20", size = 0.5,
linetype = 1, alpha = 1
),
draw_key = draw_key_polygon,
draw_group = function(data, panel_params, coord) {
coords <- coord$transform(data, panel_params)
stars <- purrr::map_dfr(1:nrow(coords),
function(i)
star(points = 9,
rotation_angle = pi/10,
radius = 0.1,
center = c(coords$x[i], coords$y[i])) %>%
mutate(id = i))
# A polygon can only have a single colour, fill, etc, so take from first row
first_row <- coords[1, , drop = FALSE]
grid::polygonGrob(
stars$x, stars$y,
default.units = "native",
gp = grid::gpar(
group = stars$id,
col = coords$colour,
fill = scales::alpha(coords$fill, coords$alpha),
lwd = coords$size * .pt,
lty = coords$linetype
)
)
}
)
geom_star <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, ...) {
layer(
geom = GeomSimplePolygon, mapping = mapping, data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
ggplot(mpg[1:3,], aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
ggplot(mpg[1:3,], aes(displ, hwy)) +
geom_point() +
geom_star()
ggplot(mpg[1:3,], aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
ggplot(mpg[1:3,], aes(displ, hwy)) +
geom_point() +
geom_star(aes(group = class), fill = NA)
ggplot(mpg[1:3,], aes(displ, hwy)) +
geom_point() +
geom_star(aes(colour = class), fill = NA)
? map
? split
cars |> split(mpg)
cars |> split("mpg")
cars
pacman::p_load(tidymodels, tidyverse, nycflights13)
set.seed(42)
# cargar y limpiar datos ----
flight_data <-
flights %>%
mutate(
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
date = lubridate::as_date(time_hour)
) %>%
inner_join(weather, by = c("origin", "time_hour")) %>%
dplyr::select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
na.omit() %>%
mutate_if(is.character, as.factor)  %>%
sample_n(10000)
# receta
flights_rec <-
recipe(arr_delay ~ ., data = flight_data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
# Especificamos modelo
model <- logistic_reg() %>%
set_mode("classification") %>%
set_engine("glm")
# Dividimos data ----
fligth_split <- initial_split(flight_data, strata = "arr_delay")
train <- training(fligth_split)
test <- testing(fligth_split)
# validacion cruzada
cv_folds <- vfold_cv(data = train, v = 5)
evaluar_modelo <- function(model, recipe, data_split){
model_wf <- workflow() %>%
add_recipe(recipe) %>%
add_model(model)
nb_fit <- model_wf %>%
fit_resamples(resamples = cv_folds)
print(collect_metrics(nb_fit))
nb_final <- model_wf %>%
last_fit(split = data_split)
print(collect_metrics(nb_final))
nb_test_pred <- bind_cols(
test,
nb_final %>% collect_predictions() %>% dplyr::select(starts_with(".pred_"))
)
print(table("predicted class" = nb_test_pred$.pred_class,
"observed class" = nb_test_pred$arr_delay))
}
evaluar_modelo(model, flights_rec, fligth_split)
model_wf <- workflow() %>%
add_recipe(recipe) %>%
add_model(model)
recipe = flights_rec
model_wf <- workflow() %>%
add_recipe(recipe) %>%
add_model(model)
nb_fit <- model_wf %>%
fit_resamples(resamples = cv_folds)
model %>% fit()
model %>% fit(test)
model %>% fit(data=test)
model %>% fit(arr_delay~., data=test)
model %>% fit(arr_delay~., data=test) %>% tidy()
# vemos resultados de una iteracion del modelo
model %>%
fit(arr_delay~., data=test) %>%
tidy()
# vemos resultados de una iteracion del modelo
model %>%
fit(arr_delay~., data=test) %>%
tidy() -> parametros
View(parametros)
options(scipen = 999)
# vemos resultados de una iteracion del modelo
model %>%
fit(arr_delay~., data=test) %>%
tidy() -> parametros
# vemos resultados de una iteracion del modelo
parametros <- model %>%
fit(arr_delay~., data=test) %>%
tidy()
view(parametros)
(tidymodels, tidyverse, nycflights13)
# cargamos librerias
pacman::p_load(tidyverse, tidymodels, discrim, naivebayes, nycflights13)
set.seed(42)
# data de vuelos a NYC
data <-
flights %>%
mutate(
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
date = lubridate::as_date(time_hour)
) %>%
inner_join(weather, by = c("origin", "time_hour")) %>%
dplyr::select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
na.omit() %>%
mutate_if(is.character, as.factor)  %>%
sample_n(10000)
data <-
flights %>%
mutate(
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
date = lubridate::as_date(time_hour)
) %>%
inner_join(weather, by = c("origin", "time_hour")) %>%
dplyr::select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
na.omit() %>%
mutate_if(is.character, as.factor)
# data de vuelos a NYC
data <-
flights %>%
mutate(
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
date = lubridate::as_date(time_hour)
) %>%
inner_join(weather, by = c("origin", "time_hour")) %>%
dplyr::select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
na.omit() %>%
mutate_if(is.character, as.factor)  %>%
sample_n(10000)
# receta
receta <-
recipe(arr_delay ~ ., data = data) %>%
update_role(flight, time_hour, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors())
# division datos
data_split <- initial_split(data, prop = 3/4)
train_data <- training(data_split)
test_data  <- testing(data_split)
# definimos modelo de arbol con 5 niveles de profundidad y min 10 nodos por hoja
modelo <-
decision_tree(tree_depth = 5, min_n = 10) %>%
set_engine("rpart") %>%
set_mode("classification")
modelo
fitea <- function(mod){
modelo_fit <-
workflow() %>%
add_model(mod) %>%
add_recipe(receta) %>%
fit(data = train_data)
model_pred <-
predict(modelo_fit, test_data, type = "prob") %>%
bind_cols(test_data)
return(model_pred %>%
roc_auc(truth = arr_delay, .pred_late))
}
# usamos funcion fitea con modelo de arboles
fitea(modelo)
# definimos funcion fitea para ajustar el model
fitea <- function(mod){
modelo_fit <-
workflow() %>%
add_model(mod) %>%
add_recipe(receta) %>%
fit(data = train_data)
model_pred <<-
predict(modelo_fit, test_data, type = "prob") %>%
bind_cols(test_data)
return(model_pred %>%
roc_auc(truth = arr_delay, .pred_late))
}
# usamos funcion fitea con modelo de arboles
fitea(modelo)
# probamos con otros modelos
# modelo regresion logistica
modelo_rl <-
logistic_reg() %>%
set_engine("glm")
View(modelo)
View(modelo_rl)
fitea(modelo_rl)
# modelo naive bayes
modelo_nb <-
naive_Bayes(smoothness = .8) %>%
set_engine("naivebayes")
fitea(modelo_nb)
# modelo knn
modelo_knn <-
nearest_neighbor(neighbors = 5) %>%
set_engine("kknn") %>%
set_mode("classification")
fitea(modelo_knn)
# probamos con diferentes parametros del arbol
# profundidad entre 3 y 10
# minimo de nodos entre 5 y 20
# generamos todas las combinaciones
params <- expand.grid(tree_depth = 1:5,
min_n = 5:10)
View(params)
# probamos con diferentes parametros del arbol
# profundidad entre 3 y 10
# minimo de nodos entre 5 y 20
# generamos todas las combinaciones
params <- expand.grid(tree_depth = 15:20,
min_n = 5:10)
View(params)
map(1:10, rnorm)
# usamos map para iterar sobre las 88 opciones y generar resultados
# almacenamos resultados en vector res
res <- map2_dfr(params$tree_depth,
params$min_n,
function(x,y)
fitea(decision_tree(tree_depth = x, min_n = y) %>%
set_engine("rpart") %>%
set_mode("classification")))
View(res)
# probamos con diferentes parametros del arbol
# profundidad entre 3 y 10
# minimo de nodos entre 5 y 20
# generamos todas las combinaciones
params <- expand.grid(tree_depth = 1:5,
min_n = 5:10)
# usamos map para iterar sobre las 88 opciones y generar resultados
# almacenamos resultados en vector res
res <- map2_dfr(params$tree_depth,
params$min_n,
function(x,y)
fitea(decision_tree(tree_depth = x, min_n = y) %>%
set_engine("rpart") %>%
set_mode("classification")))
View(res)
# acoplamos res con los parametros para obtener el dataframe definitivo
res <- cbind(res, params)
View(res)
pacman::p_load(tidyverse, tidymodels, discrim)
set.seed(42)
data <- read_csv("../data/Churn_Modelling.csv") %>%
mutate(is_female = ifelse(Gender == "Female",1,0),
Exited = as.factor(Exited)) %>%
select(-RowNumber, -Surname, -Geography, -Gender, -CustomerId) %>%
relocate(Exited)
data <- read_csv("data/Churn_Modelling.csv") %>%
mutate(is_female = ifelse(Gender == "Female",1,0),
Exited = as.factor(Exited)) %>%
select(-RowNumber, -Surname, -Geography, -Gender, -CustomerId) %>%
relocate(Exited)
data %>% glimpse()
data_split <- initial_split(data, prop = 3/4)
# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
nrow(test_data)
train_data %>% nrow()
receta <-
recipe(Exited ~ ., data = train_data)
receta
modelo <- svm_poly(degree = 1) %>%
set_engine("kernlab") %>%
set_mode("classification") %>%
translate()
modelo
fitea <- function(mod){
modelo_fit <-
workflow() %>%
add_model(mod) %>%
add_recipe(receta) %>%
fit(data = train_data)
model_pred <-
predict(modelo_fit, test_data, type = "prob") %>%
bind_cols(test_data)
return(model_pred %>%
roc_auc(truth = Exited, .pred_0))
}
fitea(modelo)
fitea_polySVM <- function(grado){
mod <- svm_poly(degree = grado) %>%
set_engine("kernlab") %>%
set_mode("classification") %>%
translate()
modelo_fit <-
workflow() %>%
add_model(mod) %>%
add_recipe(receta) %>%
fit(data = train_data)
model_pred <-
predict(modelo_fit, test_data, type = "prob") %>%
bind_cols(test_data)
return(model_pred %>%
roc_auc(truth = Exited, .pred_0))
}
fitea_polySVM(1)
fitea_polySVM(2)
fitea_polySVM(3)
# generamos otra funcion para fitear en diferentes grados polinomiales
fitea_polySVM <- function(grado){
mod <- svm_poly(degree = grado) %>%
set_engine("kernlab") %>%
set_mode("classification") %>%
translate()
modelo_fit <-
workflow() %>%
add_model(mod) %>%
add_recipe(receta) %>%
fit(data = train_data)
model_pred <-
predict(modelo_fit, test_data, type = "prob") %>%
bind_cols(test_data)
return(model_pred %>%
roc_auc(truth = Exited, .pred_0))
}
fitea_polySVM(6)

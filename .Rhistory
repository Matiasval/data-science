geom_point(alpha = 0.5)
ggplot(data_PCA, aes(PC1,PC2)) +
geom_point(alpha = 0.5)
data_tsne <- data_clean %>%
unique() %>%
Rtsne() %>%
.$Y
data_tsne <- data_clean %>%
unique() %>%
Rtsne() %>%
.$Y %>%
as_tibble()
data_tsne <- data_clean %>%
unique() %>%
Rtsne() %>%
.$Y
View(data_tsne)
ggplot(data_tsne, aes(V1,V2)) +
geom_point(alpha = 0.5)
data_tsne <- data_clean %>%
unique() %>%
Rtsne() %>%
.$Y %>%
as.data.frame()
ggplot(data_tsne, aes(V1,V2)) +
geom_point(alpha = 0.5)
kNNdistplot(data_tsne, k = 4)
abline(h=.7, col = "red", lty = 2)
abline(h=.9, col = "red", lty = 2)
abline(h=.1, col = "red", lty = 2)
abline(h=1, col = "red", lty = 2)
abline(h=1.5, col = "red", lty = 2)
abline(h=1.2, col = "red", lty = 2)
par(new)
modelo_dbscan <- dbscan(data_PCA, eps = 1.2, minPts = 5)
ggplot(data_tsne, aes(V1, V2, col = modelo_dbscan$cluster)) +
geom_point(alpha = 0.5)
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 5)
ggplot(data_tsne, aes(V1, V2, col = modelo_dbscan$cluster)) +
geom_point(alpha = 0.5)
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5)
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 15)
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5)
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 10)
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5)
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 15)
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5)
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
# visualizo grafico de kNN
kNNdistplot(data_tsne, k = 4)
abline(h=1.2, col = "red", lty = 2)
dev.off()
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 15)
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
# visualizo grafico de kNN
kNNdistplot(data_tsne, k = 4)
pacman::p_load(dbscan, tidyverse, Rtsne)
# cargo datos
data  <- read.csv("data/video_games_sales.csv") %>%
filter(!(is.na(Critic_Score) | is.na(User_Score))) %>%
as_tibble()
View(data)
# les echo un vistazo
data %>% glimpse()
# grafico exploratorio
ggplot(data, aes(Critic_Score, User_Score)) +
geom_point()
# limpio los NAs, cambio a numerico
data_clean <- data %>%
mutate(User_Score = as.numeric(User_Score)) %>%
filter(!(is.na(Critic_Score) | is.na(User_Score))) %>%
select(Critic_Score, User_Score, User_Count, Global_Sales)
View(data_clean)
# echo un vistazo
data_clean %>% glimpse()
# extraigo los componentes principales usando el operador %>%
data_PCA <- data_clean %>%
prcomp(scale. = TRUE) %>%
predict() %>%
.[,1:2] %>%
as_tibble()
# hago lo mismo utilizando R base
data_PCA2 <- as_tibble(predict(prcomp(data_clean, scale. = TRUE))[,1:2])
# visualizo PCA
ggplot(data_PCA, aes(PC1, PC2)) +
geom_point(alpha = 0.5)
# extraigo dimensiones obtenidas del tsne
data_tsne <- data_clean %>%
unique() %>%
Rtsne() %>%
.$Y %>%
as.data.frame()
# visualizo tsne
ggplot(data_tsne, aes(V1, V2)) +
geom_point(alpha = 0.5)
set.seed(42)
# extraigo dimensiones obtenidas del tsne
data_tsne <- data_clean %>%
unique() %>%
Rtsne() %>%
.$Y %>%
as.data.frame()
# visualizo tsne
ggplot(data_tsne, aes(V1, V2)) +
geom_point(alpha = 0.5)
# visualizo grafico de kNN
kNNdistplot(data_tsne, k = 4)
abline(h=1.2, col = "red", lty = 2)
dev.off()
? dbscan
# hago un DBScan con parametro observado
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 15)
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
# hago un DBScan con parametro observado
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 50)
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
# hago un DBScan con parametro observado
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 25)
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
# hago un DBScan con parametro observado
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 20)
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
# hago un DBScan con parametro observado
modelo_dbscan <- dbscan(data_tsne, eps = 1.2, minPts = 5)
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none")
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none") +
scale_color_viridis_d()
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none") +
scale_color_manual(colors = colors())
#visualizo
ggplot(data_tsne, aes(V1, V2, col = factor(modelo_dbscan$cluster))) +
geom_point(alpha = 0.5) +
theme(legend.position = "none") +
scale_color_manual(values = colors())
colors()
modelo_dbscan$cluster
modelo_dbscan$cluster %>% max()
max(modelo_dbscan$cluster)
modelo_dbscan$cluster %>% unique()
modelo_dbscan$cluster %>% unique() %>% length()
# limpio los NAs, cambio a numerico
data_clean <- data %>%
mutate(User_Score = as.numeric(User_Score)) %>%
filter(!(is.na(Critic_Score) | is.na(User_Score))) %>%
select(Critic_Score, User_Score, User_Count, Global_Sales) %>%
unique()
estad <- data_clean %>%
mutate(cluster = modelo_dbscan$cluster)
View(estad)
estad <- data_clean %>%
mutate(cluster = modelo_dbscan$cluster) %>%
group_by(cluster) %>%
summarise(mean)
estad <- data_clean %>%
mutate(cluster = modelo_dbscan$cluster) %>%
group_by(cluster) %>%
summarise(across(., list("mean", "sd")))
estad <- data_clean %>%
mutate(cluster = modelo_dbscan$cluster) %>%
group_by(cluster) %>%
summarise(across(., list(mean, sd)))
estad <- data_clean %>%
mutate(cluster = modelo_dbscan$cluster) %>%
group_by(cluster) %>%
summarise(mean(User_Score))
View(estad)
estad <- data_clean %>%
mutate(cluster = modelo_dbscan$cluster) %>%
group_by(cluster) %>%
summarise(mean(User_Score),
mean(Critic_Score),
mean(Global_Sales),
mean(User_Count))
View(estad)
# cargo librerias
pacman::p_load(tidyverse, Rtsne, ggdendro)
# cargo la data y aplico los mismos tratamientos que en el caso de DBScan
data_tsne  <- read.csv("data/video_games_sales.csv") %>%
mutate(User_Score = as.numeric(User_Score)) %>%
filter(!(is.na(Critic_Score) | is.na(User_Score))) %>%
select(Critic_Score, User_Score, User_Count, Global_Sales) %>%
unique() %>%
Rtsne() %>%
.$Y %>%
as.data.frame()
data_tsne %>% summary()
#Distancia euclideana
d <- dist(data_tsne)
d %>% hist()
d %>% density() %>% lines()
d %>% hist()
d %>% density() %>% lines()
lines(density(d))
? hist
hist(d, freq = NULL)
lines(density(d))
hist(d)
ggplot(data_tsne) +
geom_point(aes(V1,V2))
set.seed(42)
# cargo la data y aplico los mismos tratamientos que en el caso de DBScan
data_tsne  <- read.csv("data/video_games_sales.csv") %>%
mutate(User_Score = as.numeric(User_Score)) %>%
filter(!(is.na(Critic_Score) | is.na(User_Score))) %>%
select(Critic_Score, User_Score, User_Count, Global_Sales) %>%
unique() %>%
Rtsne() %>%
.$Y %>%
as.data.frame()
# exploramos la data
data_tsne %>% summary()
ggplot(data_tsne) +
geom_point(aes(V1,V2))
# analizo graficamente la distribucion de las distancias entre puntos
hist(d)
# hacemos un modelo jerarquico con distancia completa
model_complete <- hclust(d, method="complete")
# obtenemos una sintesis del modelo
summary(model_complete)
plot(model_complete)
# usamos la funcion dentro de R base para graficar el dendrograma
plot(model_complete)
# replicamos el grafico con ggplot
ggdendrogram(model_complete, rotate = TRUE, theme_dendro = TRUE)
# usamos la funcion dentro de R base para graficar el dendrograma
plot(model_complete)
abline(a = 40)
abline(h = 40)
abline(h = 40, col="red")
# replicamos el grafico con ggplot
ggdendrogram(model_complete, rotate = TRUE, theme_dendro = TRUE) +
geom_vline(xintercept = 40, col="red")
# replicamos el grafico con ggplot
ggdendrogram(model_complete, rotate = TRUE, theme_dendro = TRUE) +
geom_hline(yintercept = 40, col="red")
# replicamos el grafico con ggplot
ggdendrogram(model_complete, theme_dendro = TRUE) +
geom_vline(xintercept = 40, col="red")
# replicamos el grafico con ggplot
ggdendrogram(model_complete, theme_dendro = TRUE) +
geom_hline(yintercept = 40, col="red")
# analizamos el arbol si lo cortamos en h = 40
groups <- cutree(model_complete, h = 40)
groups %>% unique() %>% length()
data_tsne$cluster_complete <- groups
ggplot(data_tsne) +
geom_point(aes(V1,V2, col=cluster_complete))
data_tsne$cluster_complete <- factor(groups)
ggplot(data_tsne) +
geom_point(aes(V1,V2, col=cluster_complete))
ggplot(data_tsne) +
geom_point(aes(V1,V2, col=cluster_complete)) +
theme(legend.position = "none")
# evaluemos cuantos clusters obtenemos para los valores de h
res <- tibble("h" = quantile(d, probs  = (1:100)/100), n = 0)
for (i in 1:100){
groups <- cutree(model_complete, h = res$h[i])
res$n[i] <- groups %>% unique() %>% length()
}
ggplot(res, aes(h, n)) +
geom_point() +
scale_x_log10() +
scale_y_log10()
ggplot(res, aes(h, n)) +
geom_point()
ggplot(res, aes(h, n)) +
geom_point() +
scale_x_log10() +
scale_y_log10()
# creamos un vector vacio para almacenar los resultados
res <- tibble("h" = quantile(d, probs  = (1:100)/100), n = 0)
res
# recorremos los 100 percentiles y vamos rellenando el vector con el numero de grupos
for (i in 1:100){
groups <- cutree(model_complete, h = res$h[i])
res$n[i] <- groups %>% unique() %>% length()
}
data_tsne <- data_tsne %>% mutate(cluster_complete <- factor(groups))
data_tsne %>%
mutate(cluster_complete <- factor(groups)) %>%
group_by(cluster_complete) %>%
summarise(intra = sqrt(sd(V1)^2+sd(V2)^2))
data_tsne %>%
mutate(cluster_complete <- factor(groups)) %>%
group_by(cluster_complete) %>%
summarise(intra = sqrt(sd(V1)^2+sd(V2)^2)) %>%
mean()
data_tsne %>%
mutate(cluster_complete <- factor(groups)) %>%
group_by(cluster_complete) %>%
summarise(intra = sqrt(sd(V1)^2+sd(V2)^2)) %>%
summarise(mean(intra))
data_tsne %>%
mutate(cluster_complete <- factor(groups)) %>%
group_by(cluster_complete) %>%
summarise(intra = sqrt(sd(V1)^2+sd(V2)^2)) %>%
summarise(mean(intra)) %>%
as.numeric()
# recorremos los 100 percentiles y vamos rellenando el vector con la distancia intra cluster
for (i in 1:100){
groups <- cutree(model_complete, h = res$h[i])
res$n[i] <-   data_tsne %>%
mutate(cluster_complete <- factor(groups)) %>%
group_by(cluster_complete) %>%
summarise(intra = sqrt(sd(V1)^2+sd(V2)^2)) %>%
summarise(mean(intra)) %>%
as.numeric()
}
# visualizamos el numero de grupos vs h
ggplot(res, aes(h, n)) +
geom_point() +
scale_x_log10() +
scale_y_log10()
# visualizamos el numero de grupos vs h
ggplot(res, aes(h, n)) +
geom_point()
# creamos un vector vacio para almacenar los resultados
res <- tibble("h" = quantile(d, probs  = (1:100)/100), n = 0)
# recorremos los 100 percentiles y vamos rellenando el vector con la distancia intra cluster
for (i in 1:100){
groups <- cutree(model_complete, h = res$h[i])
res$n[i] <-   data_tsne %>%
mutate(cluster_complete <- factor(groups)) %>%
group_by(cluster_complete) %>%
summarise(intra = sqrt(sd(V1)^2+sd(V2)^2)) %>%
summarise(mean(intra)) %>%
as.numeric()
}
# visualizamos el numero de grupos vs h
ggplot(res, aes(h, n)) +
geom_point()
# recorremos los 100 percentiles y vamos rellenando el vector con la distancia intra cluster
for (i in 1:100){
groups <- cutree(model_complete, h = res$h[i])
res$n[i] <-   data_tsne %>%
mutate(cluster_complete <- factor(groups)) %>%
group_by(cluster_complete) %>%
summarise(intra = sd(V1)+sd(V2))) %>%
summarise(mean(intra)) %>%
as.numeric()
}
# recorremos los 100 percentiles y vamos rellenando el vector con la distancia intra cluster
for (i in 1:100){
groups <- cutree(model_complete, h = res$h[i])
res$n[i] <-   data_tsne %>%
mutate(cluster_complete <- factor(groups)) %>%
group_by(cluster_complete) %>%
summarise(intra = sd(V1)+sd(V2)) %>%
summarise(mean(intra)) %>%
as.numeric()
}
# visualizamos el numero de grupos vs h
ggplot(res, aes(h, n)) +
geom_point()
groups <- cutree(model_complete, h = res$h[i])
res$n[i] <- groups %>% unique() %>% length()
# recorremos los 100 percentiles y vamos rellenando el vector con la distancia intra cluster
for (i in 1:100){
groups <- cutree(model_complete, h = res$h[i])
res$n[i] <- groups %>% unique() %>% length()
}
# visualizamos el numero de grupos vs h
ggplot(res, aes(h, n)) +
geom_point() +
scale_x_log10() +
scale_y_log10()
metodos_distancias <- c("euclidean", "maximum", "manhattan", "binary", "minkowski")
d2 <- dist(data_tsne, method = metodos_distancias[1])
metodos_agregacoin <- c("complete", "average", "median", "centroid," "single",
"ward.D", "ward.D", "mcquitty")
metodos_agregacoin <- c("complete", "average", "median", "centroid", "single",
"ward.D", "ward.D", "mcquitty")
model_ward = hclust(d, method=metodos_agregacion[1])
metodos_agregacion <- c("complete", "average", "median", "centroid", "single",
"ward.D", "ward.D", "mcquitty")
d2 <- dist(data_tsne, method = metodos_distancias[1])
model_ward = hclust(d, method=metodos_agregacion[1])
# visualizamos el numero de grupos vs h
ggplot(res, aes(h, n)) +
geom_point()
d2 <- dist(data_tsne, method = metodos_distancias[1])
model2 <- hclust(d2, method=metodos_agregacion[1])
summary(model2)
summary(model2)
k =12
res$dist_k <- abs(res$n - k)
res$dist_k == min(res$dist_k)
which(res$dist_k == min(res$dist_k))
res$h[which(res$dist_k == min(res$dist_k))]
res$h[which(res$dist_k == min(res$dist_k))][1]
h_k <- res$h[which(res$dist_k == min(res$dist_k))][1]
groups <- cutree(model_i, h = h_k)
clusters_jer <- function(data, i_d, i_a, k){
d_i <- dist(data, method = metodos_distancias[i_d])
model_i <- hclust(d2, method=metodos_agregacion[i_a])
# creamos un vector vacio para almacenar los resultados
res <- tibble("h" = quantile(d_i, probs  = (1:100)/100), n = 0)
# recorremos los 100 percentiles y vamos rellenando el vector con la distancia intra cluster
for (i in 1:100){
groups <- cutree(model_i, h = res$h[i])
res$n[i] <- groups %>% unique() %>% length()
}
res$dist_k <- abs(res$n - k)
h_k <- res$h[which(res$dist_k == min(res$dist_k))][1]
groups <- cutree(model_i, h = h_k)
data$cluster <- factor(groups)
ggplot(data) +
geom_point(aes(V1,V2, col=cluster)) +
theme(legend.position = "none")
}
clusters_jer(data_tsne, 1, 1, 12)
clusters_jer <- function(data, i_d, i_a, k){
d_i <- dist(data, method = metodos_distancias[i_d])
model_i <- hclust(d2, method=metodos_agregacion[i_a])
# creamos un vector vacio para almacenar los resultados
res <- tibble("h" = quantile(d_i, probs  = (1:100)/100), n = 0)
# recorremos los 100 percentiles y vamos rellenando el vector con la distancia intra cluster
for (i in 1:100){
groups <- cutree(model_i, h = res$h[i])
res$n[i] <- groups %>% unique() %>% length()
}
res$dist_k <- abs(res$n - k)
h_k <- res$h[which(res$dist_k == min(res$dist_k))][1]
groups <- cutree(model_i, h = h_k)
data$cluster <- factor(groups)
ggplot(data) +
geom_point(aes(V1,V2, col=cluster)) +
theme(legend.position = "none") +
ggtitle(paste0(k," clusters con distancia ",
metodos_distancias[i_d]," y metodo de agregacion ",
metodos_agregacion[i_a]))
}
clusters_jer(data_tsne, 1, 1, 12)
clusters_jer <- function(data, i_d, i_a, k){
d_i <- dist(data, method = metodos_distancias[i_d])
model_i <- hclust(d2, method=metodos_agregacion[i_a])
# creamos un vector vacio para almacenar los resultados
res <- tibble("h" = quantile(d_i, probs  = (1:100)/100), n = 0)
# recorremos los 100 percentiles y vamos rellenando el vector con la distancia intra cluster
for (i in 1:100){
groups <- cutree(model_i, h = res$h[i])
res$n[i] <- groups %>% unique() %>% length()
}
res$dist_k <- abs(res$n - k)
h_k <- res$h[which(res$dist_k == min(res$dist_k))][1]
groups <- cutree(model_i, h = h_k)
data$cluster <- factor(groups)
ggplot(data) +
geom_point(aes(V1,V2, col=cluster)) +
theme(legend.position = "none") +
ggtitle(paste0(k," clusters con distancia ",
metodos_distancias[i_d],
"\n y metodo de agregacion ",
metodos_agregacion[i_a]))
}
clusters_jer <- function(data, i_d, i_a, k){
d_i <- dist(data, method = metodos_distancias[i_d])
model_i <- hclust(d2, method=metodos_agregacion[i_a])
res <- tibble("h" = quantile(d_i, probs  = (1:100)/100), n = 0)
for (i in 1:100){
groups <- cutree(model_i, h = res$h[i])
res$n[i] <- groups %>% unique() %>% length()
}
# encontramos la distnacia que cumple la restriccion de clusters
res$dist_k <- abs(res$n - k)
h_k <- res$h[which(res$dist_k == min(res$dist_k))][1]
groups <- cutree(model_i, h = h_k)
data$cluster <- factor(groups)
ggplot(data) +
geom_point(aes(V1,V2, col=cluster)) +
theme(legend.position = "none") +
ggtitle(paste0(k," clusters con distancia ",
metodos_distancias[i_d],
"\n y metodo de agregacion ",
metodos_agregacion[i_a]))
}
clusters_jer(data_tsne, 1, 1, 12)
clusters_jer(data_tsne, 4, 1, 12)
clusters_jer(data_tsne, 2, 1, 12)
clusters_jer(data_tsne, 3, 1, 12)
clusters_jer(data_tsne, 3, 5, 12)
# probamos la funcion con distintos valores de i_d, i_a, y k
clusters_jer(data_tsne, 1, 1, 3)
